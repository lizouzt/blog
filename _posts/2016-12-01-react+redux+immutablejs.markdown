---
layout:     post
title:      "如何用React+Redux+ImmutableJS进行SPA开发"
subtitle:   "如何用React+Redux+ImmutableJS进行SPA开发"
date:       2016-12-01 13:00:00
author:     "stefan"
header-img: "img/post-bg-05.jpg"
---

## 综述

使用`React + Redux + Immutable.js`进行富客户端的开发是云莱坞在2016-2017年进行前端研发的基本技术栈，但不意味着在任何时候对它进行滥用，应该至少满足如下三个条件：

> 1. 数据集合较庞大、数据关联性较强
> 2. 业务流程较复杂
> 3. 绝大多数子业务可被抽象为复用的视图或者组件

因此，比如`一个简单的静态页面`、`一个虽然数据项很多但是仅仅为纯表单的页面`都不满足上述条件，因此不建议使用该架构。

至于为什么使用React，主要有如下三个原因：

> 1. React是一个生态圈健壮的以解决组件化开发为目标的前端框架，文档全面；
> 2. 由于virtual DOM的存在，使得平台兼容性强，后续公司可基于改方案落地RN到客户端研发；
> 3. React支持服务端同构渲染（虽说Vue也支持吧），方便后续做基于SSR的RTT优化。

至于为什么使用Redux，而不使用Flux或者ReFlux，原因在于Redux单一数据集合以及绑定策略节省了大量的前端代码，并且对数据进行集中维护。结合单向数据流的概念，强迫组件更加存粹。

而对Immutable.js的使用，则得益于他本身“不可变数据”的特性，以及本身包含的巨多语法糖。

本文不是单纯的技术介绍和教程，更多的还是对公司内部基于这套技术体系的编码指导，尽量不讲How，而是谈What和Why。

本文从如下几个方面进行拆解：

* React + Redux如何进行集成开发，以及注意的点
* Immutable.js如何整合进开发流程
* 调试工具和部署方案

## React + Redux如何进行集成开发

## Immutable.js如何整合进开发流程

## 调试工具和部署方案





